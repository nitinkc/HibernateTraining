<?xml version="1.0" encoding="UTF-8"?>
<!-- The XML prolog is optional. If it exists, it must come first in the document. -->

<!-- UTF-8 is  the default encoding for XML, HTML5, CSS, JavaScript, PHP, and SQL.  -->
<!-- The Unicode Standard covers (almost) all the characters, punctuations, and symbols in the world.
     Unicode enables processing, storage, and transport of text, independent of platform and language.
-->

<!DOCTYPE hibernate-configuration PUBLIC
          "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
          "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<!-- <DTD (Document Type Definition) info> -->


<hibernate-configuration>

	<session-factory>
	
		<!-- MySql Database connection settings -->
		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
		<!-- synergistic is the database name createDatabaseIfNotExist=true will create the database-->
		<property name="connection.url">jdbc:mysql://localhost:3306/synergistic?createDatabaseIfNotExist=true</property>
		<!-- Username and Password for the database -->
		<property name="connection.username">root</property>
		<property name="connection.password">root</property>


		<!-- JDBC connection pool (use the built-in) -->
		<property name="connection.pool_size">10</property>
			
		<!-- SQL dialect -->
		<property name="dialect">org.hibernate.dialect.MySQLDialect</property>
		
		<!-- Echo/Print all executed SQL to stdout/Console -->
		<property name="show_sql">true</property>

		<!-- Drop and re-create the database schema on startup -->
		<property name="hbm2ddl.auto">create</property>
		
		<!-- ******************************************************************
		 *********COMMENT ALL OTHER MAPPINGS TO AVOID HAVING NULL TABLES*******
		 **********************************************************************
		-->
		<!-- User Defined Mapping Class for the d1 Basic table test (THE POJO CLASS THAT GOES INTO DB) -->
		<!-- <mapping class="d1.basic.singleTable.Student"/>
		
		For the Has-A Relationship in a single table 
		<mapping class="d1.basic.singleTable.H1Address"/>
		<mapping class="d1.basic.singleTable.H1User"/>
		
		For the Has-A Relationship in a single table with multiple columns 
		<mapping class="d2.hasA.singTab.multCol.H2Emp"/>
		<mapping class="d2.hasA.singTab.multCol.H2EmpAddress"/> -->
		
		
		<!-- For the Has-A Relationship splits in a multIple table with multiple columns  -->
		<!-- <mapping class="d3.hasA.multTab.H3Emp"/>
		<mapping class="d3.hasA.multTab.H3EmpAddress"/>  -->
		
		<!-- Demostration of pushing Object into a table  -->
		<!-- <mapping class="d3.hasA.multTab.Apple"/>
		<mapping class="d3.hasA.multTab.Z2ObjectStateTester"/> -->
		
		<!-- One to One Mapping Demonstration -->
		<!-- <mapping class="d4.hasA.mapping.M1Resident"/>
		<mapping class="d4.hasA.mapping.M1SSNCard"/> -->
		
		<!-- One to Many Demonstration -->
		<mapping class="d4.hasA.mapping.M2CellPhone"/>
		<mapping class="d4.hasA.mapping.M2CellUser"/>
		
	</session-factory>
	
</hibernate-configuration>